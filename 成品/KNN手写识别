import os
import numpy as np
from PIL import Image
import random

path = 'data_set/'  # 数据集路径
user_name = ['jia', 'yue', 'mu', 'ri', 'tian', 'shen', 'you']


def img2vector(im):
    im = im.convert("L")  # 灰度图像信息
    img = np.array(im).flatten()  # 展平为一维数组
    return img / 255

def dataload():
    newdict = {}
    trainData = np.zeros((400 * 7, 10000))  # （8/10标签样本数 * 标签数 ， 像素乘积）
    testData = np.zeros((100 * 7, 10000))  # （2/10标签样本数 * 标签数 ， 像素乘积）
    trainLabels = []
    testLabels = []
    train_num = 0
    test_num = 0
    filepath = os.listdir(path)  # 得到指定路径下包含的文件名字的列表
    random.shuffle(filepath)  # 打乱标签顺序，使训练样本与测试样本随机化
    for file in filepath:
        name = file.split('_')[0]
        if name in user_name:
            im = Image.open(path + file)
            if im.size[0] == 100 and im.size[1] == 100:  # 像素数
                if not newdict.get(name):
                    newdict.update({name: 1})
                else:
                    newdict.update({name: newdict.get(name) + 1})
                if newdict.get(name) <= 400:  # 前8/10
                    trainData[train_num, :] = img2vector(im)
                    train_num += 1
                    trainLabels.append(name)
                elif newdict.get(name) <= 500:  # 后2/10
                    testData[test_num, :] = img2vector(im)
                    test_num += 1
                    testLabels.append(name)
                else:
                    pass
    return {'train': trainData, 'trainLabels': trainLabels, 'test': testData, 'testLabels': testLabels}
    # 获取图像数据的二进制列表以及标签

DATA = dataload()
train_images = DATA['train']
test_images = DATA['test']
train_labels = DATA['trainLabels']
test_labels = DATA['testLabels']

# print(train_images, '\n')
# print(test_images, '\n')
# print(train_labels, '\n')
# print(test_labels, '\n')

from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier as KNN
import joblib
import matplotlib.pyplot as plt             # 用于绘制图表


# 模型训练（对不同K值的拟合效果做出测定，并选出最合适的K值）
knn_acc = []
m = 0             #数据记录
for i in range(1, 250):
    neigh = KNN(n_neighbors=i, algorithm='auto', weights='distance')   # k-邻近算法
    # n_neighbors:  邻居的数量
    # weights:      更近的邻居对于所预测的点的影响更大
    # algorithm:    自动选择最合适的算法

    neigh.fit(train_images, train_labels)                   # train_images训练数据，train_labels目标值
    y_pred = neigh.predict(test_images)                     # 给test_images预测相应的类别标签
    print(i, '\t', metrics.adjusted_rand_score(test_labels, y_pred))         # 随机兰德调整指数
    if metrics.adjusted_rand_score(test_labels, y_pred) > m:
        m = metrics.adjusted_rand_score(test_labels, y_pred)
        model_path = './neigh_model'
        joblib.dump(neigh, model_path)                      # 模型持久化
    knn_acc.append(metrics.accuracy_score(test_labels, y_pred))              # 所有分类正确的百分比

# print(knn_acc)

#使用直方图表展示不同K值训练处的模型的评估效果
def plot_graphs_knn(knn_acc):
    plt.bar(list(range(1,250)), knn_acc)
    plt.xticks(np.arange(1, 250, 10))           # x坐标取值范围
    plt.ylim(0.6, 1.00)                         # y坐标取值范围
    plt.xlabel('K')
    plt.ylabel('acc')
    plt.show()
plot_graphs_knn(knn_acc)

#进行手写汉字识别
print('原数据标签：\n'+str(test_labels[:20])+"\n预测数据标签：")     # 随机取20个样本进行识别
neigh_model = joblib.load('neigh_model')                        # 模型从本地调回
print(list(neigh_model.predict(test_images[:20])))              # 打印识别结果
